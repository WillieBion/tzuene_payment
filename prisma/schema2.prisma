generator client {
  provider = "prisma-client-js"
  engineType = "library"
  output   = "./generated/db2"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL_FEEDER")
}

model Cities {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  city       String @unique
  provinceId String @db.ObjectId
}

model CompanyExtDetails {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  address       String
  avatar        String
  businessName  String   @unique
  cityId        String   @db.ObjectId
  createdAt     DateTime @db.Date
  description   String
  facebook      String
  instagram     String
  isVerified    String
  linkedin      String
  provinceId    String   @db.ObjectId
  twitterx      String
  updatedAt     DateTime @db.Date
  userDetailsId String   @unique
}

model Event {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  avatar          String
  cityId          String   @db.ObjectId
  companyId       String   @db.ObjectId
  createdAt       DateTime @db.Date
  date            String
  description     String
  eventCategoryId String   @db.ObjectId
  isArchived      String
  location        String
  name            String
  provinceId      String   @db.ObjectId
  time            String
  updatedAt       DateTime @db.Date
}

model EventActivities {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  activity String @unique
}

model EventCategory {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  eventCategory String @unique
}

model EventExtDetails {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  closingDate String
  eventId     String @unique @db.ObjectId
  sellingDate String
}

model Followers {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  followeeId Json?
  /// Field referred in an index, but found no data to define the type.
  followerId Json?

  @@unique([followerId, followeeId])
}

model Gender {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  gender String @unique
}

model Managers {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  companyId    String   @db.ObjectId
  createdAt    DateTime @db.Date
  email        String   @unique
  password     String
  updatedAt    DateTime @db.Date
  userName     String
  userRoleId   String   @db.ObjectId
  userStatusId String   @db.ObjectId
}

model Provinces {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  province String @unique
}

model TicketPrices {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  amount            String
  description       String
  eventExtDetailsId String @db.ObjectId

  @@unique([eventExtDetailsId, description])
}

model TicketsStatus {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  status String @unique
}

model UserDetails {
  id           String   @id @map("_id")
  createdAt    DateTime @db.Date
  email        String   @unique
  msisdn       String   @unique
  updatedAt    DateTime @db.Date
  userName     String   @unique
  userRoleId   String   @db.ObjectId
  userStatusId String   @db.ObjectId
}

model UserExtDetails {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  genderId      Json?  @unique
  /// Field referred in an index, but found no data to define the type.
  userDetailsId Json?  @unique
}

model UserRoles {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  role String @unique
}

model UserStatus {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  status String @unique
}
